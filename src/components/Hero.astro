<div id="canvas_container"></div>

<style>
  #canvas_container {
    aspect-ratio: 1.61803; /* oh, I'm such a nerd */
    box-sizing: border-box;
    @media (min-width: 768px)  {
      aspect-ratio: 3;
    }
  }
</style>

<script>
  import * as PIXI from 'pixi.js'

  async function initPixi() {
    try {
      const BG_COLOR = '#000'
      const LINE_COLOR = 0x22d3ee //0x6b21a8
      const LINE_WIDTH = 1.25
      const VERTEX_COLOR = 0xDD0064
      const VERTEX_RADIUS = 2
      const VERTEX_SPARSITY = 1300
      const MAX_VERTEX_VEL = .25
      const MAX_VERTEX_REPULSE_VEL = 3 * MAX_VERTEX_VEL
      const MAX_LINE_LENGTH = 120
      const OUTER_PADDING = 20
      const POINTER_INFLUENCE_DIST = 50

      const canvas_container = document.querySelector('#canvas_container') as HTMLDivElement
      const app = new PIXI.Application()
      
      // Initialize the application asynchronously
      await app.init({ 
        background: BG_COLOR, 
        antialias: true, 
        resizeTo: canvas_container 
      })
  
  // Enable interactivity!
  app.stage.eventMode = 'static';
  // Make sure the whole canvas area is interactive, not just the circle.
  app.stage.hitArea = app.screen;

  canvas_container.appendChild(app.canvas as HTMLCanvasElement);

  const NUM_VERTEXES = Math.round(app.screen.width * app.screen.height / VERTEX_SPARSITY)
  const MIN_WIDTH_VIRT_SCREEN = 0 - OUTER_PADDING
  const MAX_WIDTH_VIRT_SCREEN = app.screen.width + OUTER_PADDING
  const MIN_HEIGHT_VIRT_SCREEN = 0 - OUTER_PADDING
  const MAX_HEIGHT_VIRT_SCREEN = app.screen.height + OUTER_PADDING

  const graphics = new PIXI.Graphics();
  app.stage.addChild(graphics);

  let ptr_pos = new PIXI.Point(Infinity, Infinity)

  class Vertex {
    pos: PIXI.Point
    vel: PIXI.Point

    constructor(x: number, y: number, vel: PIXI.Point) {
      this.pos = new PIXI.Point(x, y)
      this.vel = vel
    }

    accelerate(x_dist: number, y_dist: number, delta: number) {
      const mouse_acc = new PIXI.Point(2 / x_dist, 2 / y_dist)
      // Add mouse acceleration to velocity
      this.vel.x += mouse_acc.x * delta
      this.vel.y += mouse_acc.y * delta
      
      // Check magnitude and limit if necessary
      const magnitude = Math.sqrt(this.vel.x * this.vel.x + this.vel.y * this.vel.y)
      if (magnitude > MAX_VERTEX_REPULSE_VEL) {
        // Normalize and multiply by max velocity
        this.vel.x = (this.vel.x / magnitude) * MAX_VERTEX_REPULSE_VEL
        this.vel.y = (this.vel.y / magnitude) * MAX_VERTEX_REPULSE_VEL
      }
    }

    decelerate(delta: number) {
      this.vel.x *= .995
      this.vel.y *= .995
    }

    move(delta: number) {
      if (this.pos.x < MIN_WIDTH_VIRT_SCREEN) {
        this.pos.x = MIN_WIDTH_VIRT_SCREEN
        this.vel.x = -this.vel.x
      } else if (this.pos.x > MAX_WIDTH_VIRT_SCREEN) {
        this.pos.x = MAX_WIDTH_VIRT_SCREEN
        this.vel.x = -this.vel.x
      }

      if (this.pos.y < MIN_HEIGHT_VIRT_SCREEN) {
        this.pos.y = MIN_HEIGHT_VIRT_SCREEN
        this.vel.y = -this.vel.y
      } else if (this.pos.y > MAX_HEIGHT_VIRT_SCREEN) {
        this.pos.y = MAX_HEIGHT_VIRT_SCREEN
        this.vel.y = -this.vel.y
      }

      // Apply velocity to position
      this.pos.x += this.vel.x * delta
      this.pos.y += this.vel.y * delta
    }
  }

  // Initialize vertexes
  const vertexes: Vertex[] = []
  for (let i = 0; i < NUM_VERTEXES; i++) {
    const randX = get_random_range(-OUTER_PADDING, MAX_WIDTH_VIRT_SCREEN)
    const randY = get_random_range(-OUTER_PADDING, MAX_HEIGHT_VIRT_SCREEN)
    const randXrange = get_random_range(-1, 1)
    const randYrange = get_random_range(-1, 1)
    const randVel = new PIXI.Point(randXrange, randYrange)
    // Normalize the vector
    const magnitude = Math.sqrt(randVel.x * randVel.x + randVel.y * randVel.y)
    if (magnitude > 0) {
      randVel.x /= magnitude
      randVel.y /= magnitude
    }
    // Multiply by random scalar
    const scalar = get_random_range(-MAX_VERTEX_VEL, MAX_VERTEX_VEL)
    randVel.x *= scalar
    randVel.y *= scalar
    vertexes.push(new Vertex(randX, randY, randVel))
  }

  app.stage.on('pointermove', (e) => { ptr_pos.set(e.globalX, e.globalY) })

  app.ticker.add((ticker) => {
    const delta = ticker.deltaTime
    graphics.clear()
    
    for (let i = 0; i < NUM_VERTEXES; i++) {
      const v1 = vertexes[i].pos
      const x_dist = v1.x - ptr_pos.x
      const y_dist = v1.y - ptr_pos.y
      const ptr_dist_squared = x_dist * x_dist + y_dist * y_dist
      if (ptr_dist_squared < POINTER_INFLUENCE_DIST * POINTER_INFLUENCE_DIST) {
        vertexes[i].accelerate(x_dist, y_dist, delta)
        graphics.moveTo(v1.x, v1.y)
        graphics.lineTo(ptr_pos.x, ptr_pos.y)
        graphics.stroke({ width: LINE_WIDTH, color: '#FFF', alpha: .33 })
      } else {
        const velMagnitudeSquared = vertexes[i].vel.x * vertexes[i].vel.x + vertexes[i].vel.y * vertexes[i].vel.y
        if (velMagnitudeSquared > MAX_VERTEX_VEL * MAX_VERTEX_VEL) {
          vertexes[i].decelerate(delta)
        }
      }
        

      for (let j = i + 1; j < NUM_VERTEXES; j++) {
        const v2 = vertexes[j].pos
        const x_dist = Math.abs(v1.x - v2.x)
        const y_dist = Math.abs(v1.y - v2.y)
        
        // Early exit if vertices are too far apart (optimization)
        if (x_dist > MAX_LINE_LENGTH || y_dist > MAX_LINE_LENGTH) continue
        
        const dist = Math.sqrt(x_dist ** 2 + y_dist ** 2)
        if (dist < MAX_LINE_LENGTH) {
          const alpha = Math.max(0, .85 - lerp(dist, 0, MAX_LINE_LENGTH, 0, 1))
          graphics.moveTo(v1.x, v1.y)
          graphics.lineTo(v2.x, v2.y)
          graphics.stroke({ width: LINE_WIDTH, color: LINE_COLOR, alpha: alpha })
        }
      }
    }


    for (const v of vertexes) {
      graphics.setFillStyle({ color: VERTEX_COLOR })
      graphics.circle(v.pos.x, v.pos.y, VERTEX_RADIUS)
      graphics.fill()
      // move vertex
      v.move(delta)
    }
  });

  function get_random_range(min: number, max: number) {
    return Math.random() * (max - min) + min
  }

  function lerp(x: number, from_min: number, from_max: number, to_min: number, to_max: number) {
    const ratio = x / (from_max - from_min)
    return ratio * (to_max - to_min)
  }
  
    } catch (error) {
      console.error('Error initializing PixiJS:', error);
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initPixi);
  } else {
    initPixi();
  }
</script>