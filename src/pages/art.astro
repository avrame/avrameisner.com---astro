---
import ThumbnailLink from '../components/ThumbnailLink.astro';
import Heading from '../components/Heading.astro';
import Layout from '../layouts/Layout.astro';
---

<Layout title="Welcome to Avram Eisner dot com.">
	<Heading level={1}>My Art</Heading>
	<ul class="grid grid-cols-3 gap-10 lightbox-links-container">
		<ThumbnailLink url="img/art/alien-world.jpg">Alien World</ThumbnailLink>
		<ThumbnailLink url="img/art/crab.jpg">Crab in Eel Grass</ThumbnailLink>
		<ThumbnailLink url="img/art/ganesh.jpg">Ganesh</ThumbnailLink>
		<ThumbnailLink url="img/art/neon-forest.jpg">Neon Forest</ThumbnailLink>
	</ul>
	<dialog id="lightbox">
		<button class="close"><i class="iconoir-cancel"></i></button>
		<button class="prev-image"><i class="iconoir-nav-arrow-left"></i></button>
		 <figure>
			<img alt="">
			<figcaption></figcaption>
		</figure> 
		<button class="next-image"><i class="iconoir-nav-arrow-right"></i></button>
	</dialog>
</Layout>

<script>
	interface ImageData {
		url: string | null
		title?: string
	}

	// *** START ELEMENTS ***
	let img_idx = 0
	const lightbox_links_container = document.querySelector('.lightbox-links-container')
	const lightbox_links = lightbox_links_container?.querySelectorAll('a')
	const lightbox = document.getElementById('lightbox') as HTMLDialogElement
	const lightbox_img = document.querySelector('#lightbox img')
	const img_caption = document.querySelector('#lightbox figcaption')
	const close_btn = document.querySelector('#lightbox .close')
	const prev_img_btn = document.querySelector('#lightbox .prev-image')
	const next_img_btn = document.querySelector('#lightbox .next-image')
	// *** END ELEMENTS ***

	lightbox_links_container?.addEventListener('click', show_lightbox)

	const images: Array<ImageData> = []
	lightbox_links?.forEach(lb_link => {
		images.push(get_img_data(lb_link))
	})

	close_btn?.addEventListener('click', hide_lightbox)
	prev_img_btn?.addEventListener('click', show_prev_image)
	next_img_btn?.addEventListener('click', show_next_image)

	// *** START FUNCTIONS ***
	function show_lightbox (event: Event) {
		event.preventDefault()

		const target = event.target as Element
		const link = target.closest('a') as HTMLAnchorElement

		if (link?.tagName === 'A') {
			const img_data = get_img_data(link)
			if (img_data.url) {
				img_idx = images.findIndex(imgObj => imgObj.url === img_data.url)
				set_figure(img_data)
			}
			// Attach keyboard events
			document.addEventListener('keydown', handle_keyboard)
			lightbox?.classList.add('fade-in')
			lightbox?.showModal()
		}
	}

	function handle_keyboard(event: KeyboardEvent) {
		switch(event.key) {
			case 'ArrowRight':
				show_next_image()
				break
			case 'ArrowLeft':
				show_prev_image()
				break
			case 'Escape':
				hide_lightbox()
				break
		}
	}

	function fade_out_lightbox () {
		lightbox.classList.remove('fade-out')
		lightbox.close()
		lightbox.removeEventListener('transitionend', fade_out_lightbox)
	}

	function hide_lightbox() {
		lightbox.classList.remove('fade-in')
		lightbox.classList.add('fade-out')
		document.removeEventListener('keydown', handle_keyboard)
		lightbox.addEventListener('transitionend', fade_out_lightbox)
	}

	function show_next_image() {
		const new_idx = img_idx + 1
		img_idx = (new_idx === images.length) ? 0 : new_idx
		set_figure(images[img_idx])
	}

	function show_prev_image() {
		const new_idx = img_idx - 1
		img_idx = (new_idx < 0) ? images.length - 1 : new_idx
		set_figure(images[img_idx])
	}

	function get_img_data(link: HTMLAnchorElement): ImageData {
		const url = link.getAttribute('href')
		const title = link.querySelector('.title')?.innerHTML
		return { url, title }
	}

	function set_figure({url, title}: ImageData) {
		if (url) lightbox_img?.setAttribute('src', url)
		if (title) {
			lightbox_img?.setAttribute('alt', title)
			if (img_caption) img_caption.innerHTML = title
		}
	}
	// *** END FUNCTIONS ***
</script>

<style is:global>
	@tailwind components;

	@layer components {
		#lightbox {
			display: flex;
			justify-content: space-around;
			align-items: center;
			position: fixed;
			width: 100vw;
			height: 100vh;
			max-width: 100vw;
			max-height: 100vh;
			left: 0;
			top: 0;
			z-index: -10;
			background: rgba(0, 0, 0, 0.75);
			opacity: 0;
			transition: opacity .5s;
		}
		#lightbox .close {
			@apply text-white hover:text-gray-400 text-4xl absolute right-2 top-2 flex justify-center items-center;
		}
		#lightbox .next-image, #lightbox .prev-image {
			@apply text-white hover:text-gray-400 text-5xl flex justify-center items-center;
			height: calc(100% - 25vh);
		}
		#lightbox.fade-in {
			opacity: 1;
			z-index: 100;
		}
		#lightbox.fade-out {
			opacity: 0;
			z-index: 100;
		}
		#lightbox figure img {
			@apply rounded-md;
			max-height: calc(100vh - 6rem);
		}
		#lightbox figure figcaption {
			@apply text-white text-center italic mt-2;
		}
	}
</style>
